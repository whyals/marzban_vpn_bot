from telethon import events, Button
import subprocess
import asyncio

from bot_init import bot
from wtf_bot_config import MARZBAN_LOGIN, MARZBAN_PASSWORD, SERVERS

from utils.vpn_func import get_access_token
from utils.logging_func import setup_logger

logger = setup_logger("ping_server", "ping_server.log")


async def check_ping(host):
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞ –¥–ª—è —Ö–æ—Å—Ç–∞: {host}")
    try:
        result = subprocess.run(['ping', '-c', '4', host], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode == 0:
            logger.info(f"–ü–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω –¥–ª—è {host}")
            return "‚úÖ –°–µ—Ä–≤–µ—Ä –ø–∏–Ω–≥—É–µ—Ç—Å—è", result.stdout
        else:
            logger.warning(f"–ü–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è {host}")
            return "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –ø–∏–Ω–≥—É–µ—Ç—Å—è", result.stdout
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∏–Ω–≥–∞ –¥–ª—è {host}: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∏–Ω–≥–∞: {e}", None


async def check_packets(detailed_ping):
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤")
    if detailed_ping and (
        "4 packets transmitted, 4 packets received" in detailed_ping or
        "4 packets transmitted, 4 received" in detailed_ping
    ):
        logger.info("–í—Å–µ –ø–∞–∫–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã")
        return "‚úÖ –í—Å–µ –ø–∞–∫–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã"
    else:
        logger.warning("–ü–∞–∫–µ—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–ª–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã")
        return "‚ùå –ü–∞–∫–µ—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–ª–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã"


async def check_token(server):
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞: {server['name_ru']}")
    try:
        base_url = server["url"]


        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {base_url}/api/admin/token")
        logger.info(f"–ü–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ: username={MARZBAN_LOGIN}, password=[HIDDEN]")

        token = await get_access_token(base_url)
        logger.info(f"–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –¥–ª—è {server['name_ru']}: {token[:10]}... (–æ–±—Ä–µ–∑–∞–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)")
        return "‚úÖ VPN –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è {server['name_ru']}: {str(e)}")
        return f"‚ùå VPN –∫–ª–∏–µ–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {str(e)}"


@bot.on(events.NewMessage(pattern='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤'))
async def handler(event):
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤'")
    buttons = [[Button.inline(name, data=server["ip"])] for name, server in SERVERS.items()]
    await event.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", buttons=buttons)


@bot.on(events.CallbackQuery(pattern=r'^\d+\.\d+\.\d+\.\d+$'))
async def callback(event):
    host = event.data.decode("utf-8")
    server_name, server = next(((name, srv) for name, srv in SERVERS.items() if srv["ip"] == host), (host, None))
    logger.info(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {server_name} ({host})")

    await event.edit(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ **{server_name}**...\n\n–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–Ω–≥–∞...")
    await asyncio.sleep(1)

    ping_result, detailed_ping = await check_ping(host)
    await event.edit(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ **{server_name}**...\n\n{ping_result}\n–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–∫–µ—Ç–æ–≤...")
    await asyncio.sleep(1)

    packet_result = await check_packets(detailed_ping)
    message = f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ **{server_name}**...\n\n{ping_result}\n{packet_result}"

    await event.edit(f"{message}\n–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞...")
    await asyncio.sleep(1)

    token_result = await check_token(server) if server else "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
    message = (
        f"üîç –û—Ç—á–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ **{server_name}**:\n\n"
        f"{ping_result}\n"
        f"{packet_result}\n"
        f"{token_result}\n\n"
        f"–ï—Å–ª–∏ –∑–∞–º–µ—Ç–∏–ª–∏ –æ—à–∏–±–∫—É, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @why_als"
    )
    button = Button.inline("–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", data=f"detail_{host}")
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {server_name}")
    await event.edit(message, buttons=[[button]])


@bot.on(events.CallbackQuery(pattern=r'^detail_\d+\.\d+\.\d+\.\d+$'))
async def handle_detail(event):
    host = event.data.decode("utf-8").split("_")[1]
    server_name, server = next(((name, srv) for name, srv in SERVERS.items() if srv["ip"] == host), (host, None))
    logger.info(f"–ù–∞—á–∞–ª–æ –ø–æ–¥—Ä–æ–±–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {server_name} ({host})")

    await event.edit(f"üîç –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ **{server_name}**...\n\n–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–Ω–≥–∞...")
    await asyncio.sleep(1)

    ping_result, detailed_ping = await check_ping(host)
    await event.edit(f"üîç –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ **{server_name}**...\n\n{ping_result}\n–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–∫–µ—Ç–æ–≤...")
    await asyncio.sleep(1)

    packet_result = await check_packets(detailed_ping)
    message = f"üîç –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ **{server_name}**...\n\n{ping_result}\n{packet_result}"

    await event.edit(f"{message}\n–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞...")
    await asyncio.sleep(1)

    token_result = await check_token(server) if server else "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
    message = (
        f"üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ **{server_name}**:\n\n"
        f"{ping_result}\n"
        f"{packet_result}\n"
        f"{token_result}\n\n"
        f"**–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–∏–Ω–≥–∞:**\n```\n{detailed_ping if detailed_ping else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n```\n"
        f"–ï—Å–ª–∏ –∑–∞–º–µ—Ç–∏–ª–∏ –æ—à–∏–±–∫—É, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @why_als"
    )
    logger.info(f"–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {server_name}")
    await event.edit(message)